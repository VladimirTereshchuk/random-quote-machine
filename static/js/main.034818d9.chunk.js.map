{"version":3,"sources":["components/QuoteMachine.js","App.js","serviceWorker.js","index.js"],"names":["QuoteMachine","assignNewQuoteIndex","selectedQuote","clasess","Card","style","minHeight","position","display","flexDirection","CardContent","className","quoteMark","icon","faQuoteLeft","Typography","id","card","fontSize","quote","padding","textAlign","author","alignSelf","bottom","width","margin","CardActions","justifyContent","IconButton","button","target","href","encodeURI","faTwitter","Button","size","onClick","useStyles","makeStyles","container","alignItems","height","backgroundColor","props","randomColor","color","boxShadow","transform","App","useState","quotes","setQuotes","selectedQuoteIndex","setSelectedQuoteIndex","a","random","length","getSelectedQuote","Number","isInteger","useEffect","fetch","data","json","fetchData","Grid","justify","xs","sm","md","lg","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.034818d9.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nconst QuoteMachine = ({ assignNewQuoteIndex, selectedQuote, clasess }) => (\n  <Card\n    style={{\n      minHeight: \"23rem\",\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    }}\n  >\n    <CardContent style={{ display: \"flex\" }}>\n      <FontAwesomeIcon className={clasess.quoteMark} icon={faQuoteLeft} />\n\n      <Typography\n        id=\"text\"\n        className={clasess.card}\n        style={{ fontSize: \"1.2rem\" }}\n      >\n        {selectedQuote.quote}\n      </Typography>\n    </CardContent>\n    <CardContent style={{ padding: \"0 1rem\" }}>\n      <Typography\n        id=\"text\"\n        className={clasess.card}\n        style={{ textAlign: \"right\" }}\n      >\n        -<span id=\"author\">{selectedQuote.author}</span>\n      </Typography>\n    </CardContent>\n    <CardContent\n      style={{\n        alignSelf: \"flex-end\",\n        position: \"absolute\",\n        bottom: \"0rem\",\n        width: \"90%\",\n        margin: \"0 auto\",\n      }}\n    >\n      <CardActions\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n\n          justifyContent: \"space-between\",\n        }}\n      >\n        <IconButton\n          className={clasess.button}\n          id=\"tweet-quote\"\n          target=\"_blank\"\n          href={encodeURI(\n            `https://twitter.com/intent/tweet?text=${selectedQuote.quote}&hashtags=thewebdevcoach`\n          )}\n        >\n          <FontAwesomeIcon icon={faTwitter} />\n        </IconButton>\n        <Button\n          id=\"new-quote\"\n          className={clasess.button}\n          size=\"small\"\n          onClick={assignNewQuoteIndex}\n        >\n          Next Quote\n        </Button>\n      </CardActions>\n    </CardContent>\n  </Card>\n);\n\nexport default QuoteMachine;\n","import React, { useEffect, useState } from \"react\";\nimport { random } from \"lodash\";\n// import \"typeface-roboto\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport QuoteMachine from \"./components/QuoteMachine\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n// const styles = {\n//   container: {\n//     alignItems: \"center\",\n//     display: \"flex\",\n//     height: \"100vh\",\n//     backgroundColor: \"red\",\n//   },\n// };\n\nconst useStyles = makeStyles({\n  container: {\n    alignItems: \"center\",\n    display: \"flex\",\n    height: \"100vh\",\n    backgroundColor: (props) => props.randomColor,\n    // backgroundColor: a[random(0, a.length - 1)],\n  },\n\n  card: {\n    color: (props) => props.randomColor,\n    padding: \"1rem\",\n  },\n  button: {\n    backgroundColor: (props) => props.randomColor,\n    color: \"white\",\n    boxShadow: \"2px 4px #999\",\n\n    \"&:hover\": {\n      backgroundColor: (props) => props.randomColor,\n      // transform: \"translateY(-2px) translateX(-2px)\",\n      \"&:active\": {\n        //       background-color: #3e8e41;\n        boxShadow: \"0 1px #666\",\n        transform: \"translateY(4px)\",\n      },\n    },\n  },\n  quoteMark: {\n    fontSize: \"1.5rem\",\n    color: (props) => props.randomColor,\n  },\n});\n\nexport default function App() {\n  const [quotes, setQuotes] = useState([]);\n  const [selectedQuoteIndex, setSelectedQuoteIndex] = useState(null);\n\n  const a = [\n    \"rgb(243, 156, 18)\",\n    \"rgb(39, 174, 96)\",\n    \"rgb(22, 160, 133)\",\n    \"rgb(189, 187, 153)\",\n    \"rgb(22, 160, 133)\",\n    \"rgb(44, 62, 80)\",\n    \"rgb(251, 105, 100)\",\n    \"rgb(71, 46, 50)\",\n    \"rgb(231, 76, 60)\",\n  ];\n  const clasess = useStyles({ randomColor: a[random(0, a.length - 1)] });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const data = await fetch(\n        \"https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json\"\n      );\n      const quotes = await data.json();\n      setQuotes(quotes);\n      setSelectedQuoteIndex(random(0, quotes.length - 1));\n    };\n    fetchData();\n  }, []);\n\n  useEffect(() => {}, [quotes]);\n\n  function getSelectedQuote() {\n    if (!quotes.length || !Number.isInteger(selectedQuoteIndex)) {\n      return undefined;\n    }\n    return quotes[selectedQuoteIndex];\n  }\n\n  /**\n   * Returns an integer representing an index in state.quotes\n   * If state.quotes is empty, returns undefined\n   */\n  // function generateNewQuoteIndex() {\n  //   if (!quotes.length) {\n  //     return undefined;\n  //   }\n  //   return random(0, quotes.length - 1);\n  // }\n\n  function assignNewQuoteIndex() {\n    setSelectedQuoteIndex(random(0, quotes.length - 1));\n  }\n\n  return (\n    <Grid\n      className={clasess.container}\n      id=\"quote-box\"\n      justify=\"center\"\n      container\n    >\n      <Grid xs={11} sm={8} md={6} lg={5} item>\n        {getSelectedQuote() ? (\n          <QuoteMachine\n            clasess={clasess}\n            selectedQuote={getSelectedQuote()}\n            assignNewQuoteIndex={assignNewQuoteIndex}\n          />\n        ) : null}\n      </Grid>\n    </Grid>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}